# -*- mode: ruby -*-
# vi: set ft=ruby :

require 'yaml'

dir    = File.dirname(File.expand_path(__FILE__))

managers = YAML.load_file("#{dir}/configs/managers.yml")
workers = YAML.load_file("#{dir}/configs/workers.yml")
managerLeaderIpAddr = managers[0]['ip_addr']

Vagrant.configure("2") do |config|
  
  managers.each do |manager|
    CreateVM(config, manager, 'manager', managerLeaderIpAddr)
  end # managers.each

  workers.each do |worker|
    CreateVM(config, worker, 'worker', managerLeaderIpAddr)
  end # workers.each

end


def CreateVM(config, instance, join_as, managerLeaderIpAddr)
  instance_name = instance['name']
  
  config.vm.define instance_name do |vm|
    vm.vm.box = "ubuntu/bionic64"
    vm.vm.network "private_network", ip: instance['ip_addr']
    vm.vm.hostname = instance['hostname']

    ConfigureVirtualboxProvider(vm, instance)
    ProvisionVm(vm, instance, join_as, managerLeaderIpAddr)
  end # vm
end # CreateVM


def ConfigureVirtualboxProvider(vm, instance)
  instance_name = instance['name']

  vm.vm.provider "virtualbox" do |vb|
    vb.gui = false
    vb.cpus = instance['cpu']
    vb.memory = instance['memory']

    unless File.exist?("./disks/#{instance_name}-data.vdi")
      vb.customize ['createhd', '--filename', "./disks/#{instance_name}-data.vdi", '--variant', 'Fixed', '--size', "#{instance['disk_size']}"]
    end
    vb.customize ['storageattach', :id, '--storagectl', 'SCSI', '--port', 2, '--device', 0, '--type', 'hdd', '--medium', "./disks/#{instance_name}-data.vdi"]
  end # vb
end # ConfigureVirtualboxProvider


def ProvisionVm(vm, instance, join_as, manager_leader_ip_addr)
  UploadAnsibleConfigurationFile(vm)
  UploadAnsibleSSHKey(vm)

  vm.vm.provision "ansible_local" do |ansible|
    ansible.compatibility_mode = "2.0"
    ansible.playbook = instance['playbook']
    ansible.extra_vars = {
      join_as: join_as,
      manager_leader_ip_addr: manager_leader_ip_addr
    }
  end
end # ProvisionVm


def UploadAnsibleConfigurationFile(vm)
  vm.vm.provision "file", source: "playbooks/ansible.cfg", destination: "~/.ansible.cfg"
end # UploadAnsibleConfigurationFile


def UploadAnsibleSSHKey(vm)
  vm.vm.provision "shell", privileged: false, inline: <<-SHELL
    mkdir -p ~/.ssh
    
    cat /vagrant/ssh_keys/ansible > ~/.ssh/id_rsa
    cat /vagrant/ssh_keys/ansible.pub >> ~/.ssh/authorized_keys

    chmod 0400 ~/.ssh/id_rsa
  SHELL
end # UploadAnsibleSSHKey